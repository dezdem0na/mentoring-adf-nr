{
	"name": "DF_Populate_Movies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ASQL_Movies_tMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "ASQL_Movies_tMovieStatus",
						"type": "DatasetReference"
					},
					"name": "tMovieStatus"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ASQL_DataMart_DimMovie",
						"type": "DatasetReference"
					},
					"name": "DataMart"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1",
					"description": "\\"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT [MovieIdNK],[Title],[ReleaseDate],[Runtime],[MovieStatusId] FROM [dbo].[tMovies]',",
				"     format: 'query') ~> tMovies",
				"source(output(",
				"          MovieStatusId as integer,",
				"          MovieStatusName as string,",
				"          CreatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT [MovieStatusId], [MovieStatusName] FROM [dbo].[tMovieStatus]',",
				"     format: 'query') ~> tMovieStatus",
				"join1 derive(CreatedDate = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 derive(ModifiedDate = currentUTC()) ~> derivedColumn2",
				"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MovieIdNK,",
				"          Title,",
				"          ReleaseDate,",
				"          Runtime,",
				"          MovieStatus = MovieStatusName,",
				"          CreatedDate,",
				"          ModifiedDate",
				"     )) ~> DataMart"
			]
		}
	}
}